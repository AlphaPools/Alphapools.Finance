{"version":3,"sources":["context/PriceFeedContext.tsx","components/connectWallet.tsx","components/header.tsx","components/footer.tsx","constants/tokenAddresses.ts","constants/alphapoolsFarmPool.ts","utils/index.ts","hooks/useTotalValueLocked.ts","pages/home.tsx","hooks/useCirculatingSupply.ts","hooks/useAMASTRPrice.ts","components/poolLogo.tsx","components/stakeCard.tsx","constants/stakePools.ts","hooks/usePoolStats.ts","pages/stake.tsx","hooks/usePoolAPY.ts","components/AlphaPoolsFarmCard.tsx","hooks/alphapools/useAlphaVaultsStats.ts","pages/AlphaVaults.tsx","hooks/useTokenBalance.ts","hooks/useApprove.ts","hooks/useAllowance.ts","hooks/useStake.ts","components/stakePanel.tsx","hooks/useClaimRewards.ts","hooks/useExit.ts","pages/pool.tsx","pages/about.tsx","hooks/alphapools/useAlphaVaultsClaim.ts","hooks/alphapools/useAlphaVaultsStake.ts","components/AlphaPoolsFarmPanel.tsx","pages/AlphaVaultsPool.tsx","pages/app.tsx","index.tsx"],"names":["Context","createContext","coinGecko","CoinGecko","PriceFeedProvider","children","useState","setCoinGecko","useEffect","CoinGeckoClient","Provider","value","usePriceFeedContext","useContext","ConnectWallet","useWallet","status","account","connect","reset","isConnecting","isConnected","handleClick","Button","variant","disabled","onClick","substring","length","Header","Navbar","bg","expand","Brand","href","alt","src","width","height","className","style","margin","Toggle","aria-controls","Collapse","id","Nav","Link","color","Footer","Item","target","WETH_TOKEN_ADDRESS","WETH_POOL_ADDRESS","APOOL_FARM_POOLS","path","logos","name","tokenAddress","tokenName","getERC20Contract","provider","address","Web3","eth","Contract","ERC20ABI","abi","getNBUNIERC20Contract","NBUNIERC20ABI","getPoolContract","POOLABI","getAlphaVaultsContract","ALPHAVAULTSABI","getPoolStats","poolAddress","a","poolContract","methods","periodFinish","call","halvingTime","totalSupply","totalStaked","initreward","poolRate","earned","unclaimed","balanceOf","staked","console","log","getTokenBalance","userAddress","tokenContract","balance","claim","getReward","send","from","on","tx","transactionHash","approve","maxApprovalAmount","ethers","constants","MaxUint256","toString","gas","getAllowance","allowance","stake","amount","web3","tokens","utils","toWei","bntokens","toBN","unstake","withdraw","exit","getWeeklyRewards","synthContract","rewardRate","bnToDec","BN","getPoolAPY","ethAMASTRPoolContract","amastrPoolContract","wethPoolContract","ethAMASTRPoolRate","amastrPoolRate","wethPoolRate","amastrTokenContract","wethContract","ethAMASTRLPContract","totalAMASTRInUniswap","totalWETHInUniswap","totalETHAMASTRLPStaked","totalETHAMASTRLP","totalWETHStaked","totalAMASTRStaked","ethAMASTRPoolAPY","wethPoolAPY","amastrPoolAPY","getTotalValueLocked","simple","fetchTokenPrice","contract_addresses","vs_currencies","data","totalValueLockedInUniswap","usd","totalValueLockedInWETHPool","totalValueLockedInAMASTRPool","getCirculatingSupply","totalAMASTRMinted","ethAMASTRPoolRewardRate","amastrPoolRewardRate","wethPoolRewardRate","ethAMASTRPeriodFinish","amastrPoolPeriodFinish","wethPoolPeriodFinish","currentTimestamp","Date","getTime","ethAMASTRPoolRemainAmount","amastrPoolRemainAmount","wethPoolRemainAmount","devWithdrawnAmt","ethAMASTRPoolDevFund","wethPoolDevFund","amastrPoolDevFund","getAMASTRPrice","getAlphaPoolsAlphaVaultsStats","pid","undefined","alphapoolsTokenContract","AlphaVaultsContract","poolInfo","lpTokenContract","token","epochCalculationStartBlock","block","getBlock","Number","timestamp","epochCalculationStartTimestap","rewardsInThisEpoch","totalLPSupply","totalLPStaked","totalAPOOLInUniswap","userInfo","userLPStaked","totalRewardFullYear","now","poolAPY","allocPoint","pendingAlphaPools","userClaimableAPOOL","AlphaVaultsClaim","AlphaVaultsStake","deposit","AlphaVaultsUnStake","bn","decimals","dividedBy","BigNumber","pow","toNumber","decStrToBn","str","multipliedBy","getFullDisplayBalance","format","toFormat","useTotalValueLocked","totalValueLockedInUSD","setTotalValueLockedInUSD","ethereum","fetchTotalValue","useCallback","totalValue","refreshInterval","setInterval","clearInterval","Home","circulatingSupply","setCirculatingSupply","fetchCirculatingSupply","supply","useCirculatingSupply","price","amastrPrice","setAMASTRPrice","useAMASTRPrice","totalValueLocked","Container","Row","Col","xs","md","lg","Card","text","Body","Title","Text","toFixed","toLocaleString","Spinner","as","animation","role","aria-hidden","PoolLogo","map","e","i","generateLogo","StakeCard","pool","size","poolRateUnit","STAKE_POOLS","usePoolStats","pools","setPools","getStats","promisedPoolsArr","poolStats","Promise","all","resolvedPool","Stake","setPoolAPY","getPoolAPYs","promisedPoolsAPY","poolAPYs","WETH","AMASTR","ETHAMASTR","resolvedPoolAPY","usePoolAPY","AlphaPoolsFarmCard","useAlphaVaultsStats","AlphaVaultsStatus","setAlphaVaultsStats","getAlphaVaultsStats","promisedAlphaVaultsStatsArr","_AlphaVaultsStats","resolvedAlphaVaultsStatsArr","AlphaVaults","AlphaVaultsStats","Tabs","defaultActiveKey","transition","Tab","eventKey","title","useTokenBalance","accountAddress","setBalance","fetchBalance","bal","useApprove","onApprove","useAllowance","setAllowance","fetchAllowance","useStake","onStake","txHash","onUnstake","StakePanel","requestedApproval","setRequestedApproval","requestedStake","setRequestedStake","requestedUnstake","setRequestedUnstake","tokenBalance","stakeAmount","setStakeAmount","unstakeAmount","setUnstakeAmount","requestedClaim","setRequestedClaim","onClaim","useClaimRewards","onExit","useExit","requestedExit","setRequestedExit","handleClaim","Error","handleApprove","handlePercentageStakeInputs","percentage","stringValue","handlePercentageUnstakeInputs","handleStake","handleUnstake","handleExit","shouldDisableClaimButton","shouldDisableUnstakeButton","isLessThanOrEqualTo","isGreaterThan","generateInformationCard","unit","Form","Group","Control","type","placeholder","onChange","isEqualTo","ButtonToolbar","ButtonGroup","Pool","useParams","find","About","border","Image","thumbnail","useAlphaVaultsStake","onAlphaVaultsStake","onAlphaVaultsUnStake","AlphaPoolsFarmPanel","onAlphaVaultsClaim","useAlphaVaultsClaim","AlphaVaultsPool","App","fallback","exact","strict","component","ReactDOM","render","StrictMode","chainId","document","getElementById"],"mappings":"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","file":"static/js/main.4a2cc66e.chunk.js","sourcesContent":["import React, { createContext,useState, useContext, useEffect } from \"react\"\nimport CoinGecko from \"coingecko-api\"\n\ninterface ModalsContext {\n  coinGecko: unknown\n}\n\nexport const Context = createContext<ModalsContext>({\n  coinGecko: CoinGecko,\n})\n\nexport const PriceFeedProvider: React.FC = ({ children }) => {\n  const [coinGecko, setCoinGecko] = useState<any>(null)\n  useEffect(() => {\n    const CoinGeckoClient = new CoinGecko()\n    setCoinGecko(CoinGeckoClient)\n  }, [setCoinGecko])\n  return (\n    <Context.Provider\n      value={{\n        coinGecko,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport const usePriceFeedContext = () => useContext(Context) as ModalsContext","import React from 'react'\nimport { useWallet } from 'use-wallet'\nimport Button from 'react-bootstrap/Button'\n\nexport default function ConnectWallet() {\n  const { status, account, connect, reset } = useWallet()\n\n  const isConnecting = () => {\n    return status === 'connecting'\n  }\n\n  const isDisconnected = () => {\n    return status === 'disconnected'\n  }\n\n  const isConnected = () => {\n    return status === 'connected'\n  }\n\n  const handleClick = () => {\n    if (isDisconnected()) {\n      connect('injected')\n    } else {\n      reset()\n    }\n  }\n\n  const getWalletAddress = () => {\n    if (account) {\n      return account.substring(0, 6) + '...' + account.substring(account.length - 4, account.length)\n    }\n    return \"\"\n  }\n\n  return (\n    <Button variant={isConnected() ? 'outline-success' : \"outline-primary\"}\n      disabled={isConnecting()}\n      onClick={() => handleClick()}>\n        {isConnected() ? getWalletAddress() : isConnecting() ? 'Connecting…' : 'Connect Wallet'}\n    </Button>\n  )\n}","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport ConnectWallet from './connectWallet'\n\nexport default function Header() {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"sm\">\n      <Navbar.Brand href=\"/\">\n          <img\n            alt=\"\"\n            src=\"logo.svg\"\n            width=\"22\"\n            height=\"22\"\n            className=\"d-inline-block align-top mr-2\"\n            style={{margin: \"4px\"}}\n          />{' '}\n        <span className=\"apool-bg-color-linear apool-bg-color-linear-text font-weight-bold d-none d-sm-inline-block\">alphapools.finance</span>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#alphavaults\">AlphaVaults<sup style={{color: \"#28E58F\"}}> Online</sup></Nav.Link>\n          <Nav.Link href=\"#about\">About</Nav.Link>\n        </Nav>\n        <Nav><ConnectWallet/></Nav>\n      </Navbar.Collapse>\n  </Navbar>\n  )\n}","import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\n\nexport default function Footer() {\n  return (\n    <Nav className=\"justify-content-center\">\n      <Nav.Item>\n        <Nav.Link target=\"_blank\" href=\"https://twitter.com/AlphaPoolsDeFi\">Twitter</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link target=\"_blank\" href=\"https://github.com/alphapools\">Github</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link target=\"_blank\" href=\"https://t.me/AlphaPools\">Telegram</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link target=\"_blank\" href=\"https://discord.gg\">Discord</Nav.Link>\n      </Nav.Item>\n      <Nav.Item>\n        <Nav.Link target=\"_blank\" href=\"https://medium.com/@alphapools\">Medium</Nav.Link>\n      </Nav.Item>\n    </Nav>\n  )\n}","// Tokens\nexport const AMASTR_TOKEN_ADDRESS = '0x'\nexport const WETH_TOKEN_ADDRESS = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\nexport const ETH_AMASTR_UNI_LP_TOKEN_ADDRESS = '0x'\n\n// Pools\nexport const WETH_POOL_ADDRESS = '0x52fac8e7a139127a734a208fb288e5d3604ba0fd'\nexport const AMASTR_POOL_ADDRESS = ''\nexport const ETH_AMASTR_UNI_LP_POOL_ADDRESS = ''\n\n// APOOL\nexport const APOOL_TOKEN_ADDRESS = '0xeeb9ffC8cECb2700f48B21f0EFB35d57e9d16800'\nexport const APOOL_LGE_ADDRESS = '0xeeb9ffC8cECb2700f48B21f0EFB35d57e9d16800'\nexport const ALPHAVAULTS_ADDRESS = ''\nexport const ETH_APOOL_UNI_LP_TOKEN_ADDRESS = ''\nexport const AMASTR_APOOL_UNI_LP_TOKEN_ADDRESS = ''","import {\n  ETH_APOOL_UNI_LP_TOKEN_ADDRESS,\n  AMASTR_APOOL_UNI_LP_TOKEN_ADDRESS,\n} from './tokenAddresses'\n\nexport const APOOL_ALPHAVAULTS_TOTAL_POINT = 200\n\nexport const APOOL_FARM_POOLS = [\n  {\n    id: 0,\n    path: \"ETH-APOOL\",\n    logos: [\"/images/eth.png\", \"/images/alphapools.png\"],\n    name: 'ETH-APOOL LP Pool',\n    tokenAddress: ETH_APOOL_UNI_LP_TOKEN_ADDRESS,\n    tokenName: 'ETH-APOOL',\n  },\n  {\n    id: 1,\n    path: \"AMASTR-APOOL\",\n    logos: [\"/images/amastr.png\", \"/images/alphapools.png\"],\n    name: 'AMASTR-APOOL LP Pool',\n    tokenAddress: AMASTR_APOOL_UNI_LP_TOKEN_ADDRESS,\n    tokenName: 'AMASTR-APOOL',\n  }\n]","import BigNumber from 'bignumber.js'\nimport Web3 from 'web3'\nimport { provider } from 'web3-core'\nimport { AbiItem } from 'web3-utils'\nimport { ethers } from \"ethers\"\nimport BN from \"bignumber.js\"\nimport ERC20ABI from '../constants/abi/ERC20.json'\nimport POOLABI from '../constants/abi/stakePool.json'\nimport ALPHAPOOLSLGEABI from '../constants/abi/alphapoolsLGE.json'\nimport ALPHAVAULTSABI from '../constants/abi/AlphaVaults.json'\nimport NBUNIERC20ABI from '../constants/abi/NBUNIERC20.json'\nimport {\n  AMASTR_TOKEN_ADDRESS,\n  WETH_TOKEN_ADDRESS,\n  ETH_AMASTR_UNI_LP_TOKEN_ADDRESS,\n  WETH_POOL_ADDRESS,\n  AMASTR_POOL_ADDRESS,\n  ETH_AMASTR_UNI_LP_POOL_ADDRESS,\n  APOOL_LGE_ADDRESS,\n  APOOL_TOKEN_ADDRESS,\n  ALPHAVAULTS_ADDRESS,\n} from '../constants/tokenAddresses'\nimport {\n  APOOL_ALPHAVAULTS_TOTAL_POINT\n} from '../constants/alphapoolsFarmPool'\n\nexport const getERC20Contract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(ERC20ABI.abi as unknown as AbiItem, address)\n  return contract\n}\n\nexport const getNBUNIERC20Contract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    (NBUNIERC20ABI as unknown) as AbiItem,\n    address\n  )\n  return contract\n}\n\nexport const getPoolContract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    (POOLABI as unknown) as AbiItem,\n    address\n  )\n  return contract\n}\n\nexport const getAlphaPoolsLGEContract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    (ALPHAPOOLSLGEABI as unknown) as AbiItem,\n    address\n  )\n  return contract\n}\n\nexport const getAlphaVaultsContract = (provider: provider, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract(\n    (ALPHAVAULTSABI as unknown) as AbiItem,\n    address\n  )\n  return contract\n}\n\ninterface PoolStats {\n  halvingTime: string\n  totalStaked: string\n  poolRate: BN | null\n  unclaimed: BN | null\n  staked: BN | null\n}\n\nexport const getPoolStats = async (\n  provider: provider,\n  poolAddress: string,\n  account: string | null\n): Promise<PoolStats | null> => {\n  if (provider && account) {\n    try {\n      let poolContract\n      let halvingTime\n      let totalStaked\n      let poolRate\n      let unclaimed\n      let staked\n\n      poolContract = getPoolContract(provider, poolAddress)\n      halvingTime = await poolContract.methods.periodFinish().call()\n      totalStaked = await poolContract.methods.totalSupply().call()\n      poolRate = await poolContract.methods.initreward().call()\n      unclaimed = await poolContract.methods.earned(account).call()\n      staked = await poolContract.methods.balanceOf(account).call()\n\n      return {\n        halvingTime,\n        totalStaked,\n        poolRate,\n        unclaimed,\n        staked\n      }\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: provider,\n  tokenAddress: string,\n  userAddress: string\n): Promise<string> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    const balance: string = await tokenContract.methods\n      .balanceOf(userAddress)\n      .call()\n    return balance\n  } catch (e) {\n    return \"0\"\n  }\n}\n\nexport const claim = async (\n  provider: provider,\n  poolAddress: string,\n  account: string | null\n) => {\n  try {\n    const poolContract = getPoolContract(provider, poolAddress)\n    return poolContract.methods\n      .getReward()\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const approve = async (\n  provider: provider,\n  tokenAddress: string,\n  poolAddress: string,\n  account: string | null\n) => {\n  const tokenContract = getERC20Contract(provider, tokenAddress)\n  const maxApprovalAmount = ethers.constants.MaxUint256.toString()\n  try {\n    return tokenContract.methods\n      .approve(poolAddress, maxApprovalAmount)\n      .send({ from: account, gas: 80000 })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const getAllowance = async (\n  provider: provider,\n  tokenAddress: string,\n  poolAddress: string,\n  account: string\n): Promise<string> => {\n  try {\n    const tokenContract = getERC20Contract(provider, tokenAddress)\n    const allowance: string = await tokenContract.methods\n      .allowance(account, poolAddress)\n      .call()\n    return allowance\n  } catch (e) {\n    return \"0\"\n  }\n}\n\nexport const stake = async (\n  provider: provider,\n  poolAddress: string,\n  amount: string,\n  account: string\n) => {\n  const poolContract = getPoolContract(provider, poolAddress)\n  const web3 = new Web3(provider)\n  const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n  const bntokens = web3.utils.toBN(tokens)\n  return poolContract.methods\n    .stake(bntokens)\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx)\n      return tx.transactionHash\n    })\n}\n\nexport const unstake = async (\n  provider: provider,\n  poolAddress: string,\n  amount: string,\n  account: string\n) => {\n  try {\n    const poolContract = getPoolContract(provider, poolAddress)\n    const web3 = new Web3(provider)\n    const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n    const bntokens = web3.utils.toBN(tokens)\n    return poolContract.methods\n      .withdraw(bntokens)\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const exit = async (\n  provider: provider,\n  poolAddress: string,\n  account: string\n) => {\n  try {\n    const poolContract = getPoolContract(provider, poolAddress)\n    return poolContract.methods\n      .exit()\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nconst getWeeklyRewards = async function (synthContract) {\n  const rewardRate = await synthContract.methods.initreward().call()\n  return bnToDec(new BN(rewardRate))\n}\n\ninterface PoolAPY {\n  ethAMASTRPoolAPY: number | null\n  wethPoolAPY: number | null\n  amastrPoolAPY: number | null\n}\n\nexport const getPoolAPY = async (provider: provider): Promise<PoolAPY | null> => {\n  if (provider) {\n    try {\n      const ethAMASTRPoolContract = getPoolContract(provider, ETH_AMASTR_UNI_LP_POOL_ADDRESS)\n      const amastrPoolContract = getPoolContract(provider, AMASTR_POOL_ADDRESS)\n      const wethPoolContract = getPoolContract(provider, WETH_POOL_ADDRESS)\n\n      const ethAMASTRPoolRate = await getWeeklyRewards(ethAMASTRPoolContract)\n      const amastrPoolRate = await getWeeklyRewards(amastrPoolContract)\n      const wethPoolRate = await getWeeklyRewards(wethPoolContract)\n\n      const amastrTokenContract = getERC20Contract(provider, AMASTR_TOKEN_ADDRESS)\n      const wethContract = getERC20Contract(provider, WETH_TOKEN_ADDRESS)\n      const ethAMASTRLPContract = getERC20Contract(provider, ETH_AMASTR_UNI_LP_TOKEN_ADDRESS)\n\n      const totalAMASTRInUniswap = (await amastrTokenContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n      const totalWETHInUniswap = (await wethContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n      const totalETHAMASTRLPStaked = (await ethAMASTRPoolContract.methods.totalSupply().call()) / 1e18\n      const totalETHAMASTRLP = (await ethAMASTRLPContract.methods.totalSupply().call()) / 1e18\n      const totalWETHStaked = (await wethPoolContract.methods.totalSupply().call()) / 1e18\n      const totalAMASTRStaked = (await amastrPoolContract.methods.totalSupply().call()) / 1e18\n\n      const ethAMASTRPoolAPY = ethAMASTRPoolRate / 7.0 * 365.0 / (totalETHAMASTRLPStaked / totalETHAMASTRLP * totalAMASTRInUniswap * 2)\n      const wethPoolAPY = wethPoolRate / 7.0 * 365 / (totalWETHStaked * totalAMASTRInUniswap / totalWETHInUniswap)\n      const amastrPoolAPY = amastrPoolRate / 7.0 * 365 / (totalAMASTRStaked)\n\n      return {\n        ethAMASTRPoolAPY,\n        wethPoolAPY,\n        amastrPoolAPY\n      }\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nexport const getTotalValueLocked = async (provider: provider, coinGecko: any): Promise<number> => {\n  if (provider && coinGecko) {\n    try {\n      const { data } = await coinGecko.simple.fetchTokenPrice({\n        contract_addresses: WETH_TOKEN_ADDRESS,\n        vs_currencies: \"usd\",\n      })\n\n      const wethPoolContract = getPoolContract(provider, WETH_POOL_ADDRESS)\n      const amastrPoolContract = getPoolContract(provider, AMASTR_POOL_ADDRESS)\n\n      const amastrTokenContract = getERC20Contract(provider, AMASTR_TOKEN_ADDRESS)\n      const wethContract = getERC20Contract(provider, WETH_TOKEN_ADDRESS)\n\n      const totalAMASTRInUniswap = (await amastrTokenContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n      const totalWETHInUniswap = (await wethContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n      const totalWETHStaked = (await wethPoolContract.methods.totalSupply().call()) / 1e18\n      const totalAMASTRStaked = (await amastrPoolContract.methods.totalSupply().call()) / 1e18\n\n      const totalValueLockedInUniswap = totalWETHInUniswap * 2 * data[WETH_TOKEN_ADDRESS].usd\n      const totalValueLockedInWETHPool = totalWETHStaked * data[WETH_TOKEN_ADDRESS].usd\n      const totalValueLockedInAMASTRPool = totalAMASTRStaked * totalWETHInUniswap / totalAMASTRInUniswap * data[WETH_TOKEN_ADDRESS].usd\n\n      return totalValueLockedInUniswap + totalValueLockedInWETHPool + totalValueLockedInAMASTRPool\n    } catch (e) {\n      console.log(e)\n      return 0\n    }\n  } else {\n    return 0\n  }\n}\n\nexport const getCirculatingSupply = async (provider: provider): Promise<number> => {\n  if (provider) {\n    try {\n      const amastrTokenContract = getERC20Contract(provider, AMASTR_TOKEN_ADDRESS)\n\n      const ethAMASTRPoolContract = getPoolContract(provider, ETH_AMASTR_UNI_LP_POOL_ADDRESS)\n      const amastrPoolContract = getPoolContract(provider, AMASTR_POOL_ADDRESS)\n      const wethPoolContract = getPoolContract(provider, WETH_POOL_ADDRESS)\n\n      const totalAMASTRMinted = (await amastrTokenContract.methods.totalSupply().call()) / 1e18 - 1500\n\n      const ethAMASTRPoolRewardRate = await ethAMASTRPoolContract.methods.rewardRate().call() / 1e18\n      const amastrPoolRewardRate = await amastrPoolContract.methods.rewardRate().call() / 1e18\n      const wethPoolRewardRate = await wethPoolContract.methods.rewardRate().call() / 1e18\n\n      const ethAMASTRPeriodFinish = await ethAMASTRPoolContract.methods.periodFinish().call()\n      const amastrPoolPeriodFinish = await amastrPoolContract.methods.periodFinish().call()\n      const wethPoolPeriodFinish = await wethPoolContract.methods.periodFinish().call()\n\n      const currentTimestamp = new Date().getTime() / 1000 \n\n      const ethAMASTRPoolRemainAmount = currentTimestamp <= ethAMASTRPeriodFinish ? (ethAMASTRPeriodFinish - currentTimestamp) * ethAMASTRPoolRewardRate : 0\n      const amastrPoolRemainAmount = currentTimestamp <= amastrPoolPeriodFinish ? (amastrPoolPeriodFinish - currentTimestamp) * amastrPoolRewardRate : 0\n      const wethPoolRemainAmount = currentTimestamp <= wethPoolPeriodFinish ? (wethPoolPeriodFinish - currentTimestamp) * wethPoolRewardRate : 0\n\n      const ethAMASTRPoolDevFund = await ethAMASTRPoolContract.methods.devWithdrawnAmt().call() / 1e18\n      const wethPoolDevFund = await wethPoolContract.methods.devWithdrawnAmt().call() / 1e18\n      const amastrPoolDevFund = await amastrPoolContract.methods.devWithdrawnAmt().call() / 1e18\n\n      return totalAMASTRMinted - ethAMASTRPoolRemainAmount - amastrPoolRemainAmount - wethPoolRemainAmount + ethAMASTRPoolDevFund + wethPoolDevFund + amastrPoolDevFund\n    } catch (e) {\n      console.log(e)\n      return 0\n    }\n  } else {\n    return 0\n  }\n}\n\nexport const getAMASTRPrice = async (provider: provider, coinGecko: any) : Promise<number> => {\n  if (provider && coinGecko) {\n    try {\n      const { data } = await coinGecko.simple.fetchTokenPrice({\n        contract_addresses: WETH_TOKEN_ADDRESS,\n        vs_currencies: \"usd\",\n      })\n      const amastrTokenContract = getERC20Contract(provider, AMASTR_TOKEN_ADDRESS)\n      const wethContract = getERC20Contract(provider, WETH_TOKEN_ADDRESS)\n\n      const totalAMASTRInUniswap = (await amastrTokenContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n      const totalWETHInUniswap = (await wethContract.methods.balanceOf(ETH_AMASTR_UNI_LP_TOKEN_ADDRESS).call()) / 1e18\n\n      return totalWETHInUniswap / totalAMASTRInUniswap * data[WETH_TOKEN_ADDRESS].usd\n    } catch (e) {\n      console.log(e)\n      return 0\n    }\n  } else {\n    return 0\n  }\n}\n\ninterface AlphaPoolsLGEStats {\n  liquidityGenerationOngoing: boolean\n  totalETHContributed: number\n  totalAMASTRContributed: number\n  alphapoolsPriceEstimateAfterLGE: number\n  alphapoolsMarketCapEstimateAfterLGE: number\n  userETHContributed: number\n  userAMASTRContributed: number\n  lgeParticipationAgreement: string\n  secondsLeftInLiquidityGenerationEvent: number\n  lpPerETHUnit: number\n  lpPerAMASTRUnit: number\n  alphapoolsForAMASTRAllocate: number\n}\n\nexport const getAPOOLLGEStats = async (provider: provider, coinGecko: any, account: string | null) : Promise<AlphaPoolsLGEStats | null> => {\n  if (provider && coinGecko && account) {\n    try {\n      const { data } = await coinGecko.simple.fetchTokenPrice({\n        contract_addresses: [WETH_TOKEN_ADDRESS, AMASTR_TOKEN_ADDRESS],\n        vs_currencies: \"usd\",\n      })\n\n      const alphapoolsLGEContract = getAlphaPoolsLGEContract(provider, APOOL_LGE_ADDRESS)\n\n      const liquidityGenerationOngoing = await alphapoolsLGEContract.methods.liquidityGenerationOngoing().call()\n      const totalETHContributed = await alphapoolsLGEContract.methods.totalETHContributed().call() / 1e18\n      const totalAMASTRContributed = await alphapoolsLGEContract.methods.totalAMASTRContributed().call() / 1e18\n      const userETHContributed = await alphapoolsLGEContract.methods.ethContributed(account).call() / 1e18\n      const userAMASTRContributed = await alphapoolsLGEContract.methods.amastrContributed(account).call() / 1e18\n      const lgeParticipationAgreement = await alphapoolsLGEContract.methods.liquidityGenerationParticipationAgreement().call()\n      const alphapoolsPriceEstimateAfterLGE = (totalETHContributed * data[WETH_TOKEN_ADDRESS].usd + totalAMASTRContributed * data[AMASTR_TOKEN_ADDRESS].usd) / 270000\n      const alphapoolsMarketCapEstimateAfterLGE = alphapoolsPriceEstimateAfterLGE * 270000\n      const lpPerETHUnit = await alphapoolsLGEContract.methods.LPperETHUnit().call() / 1e18\n      const lpPerAMASTRUnit = await alphapoolsLGEContract.methods.LPperAMASTRUnit().call() / 1e18\n      const alphapoolsForAMASTRAllocate = await alphapoolsLGEContract.methods.calculateAMASTRAllocate().call() / 1e18\n\n      let secondsLeftInLiquidityGenerationEvent\n      try {\n        secondsLeftInLiquidityGenerationEvent = await alphapoolsLGEContract.methods.getSecondsLeftInLiquidityGenerationEvent().call()\n      } catch (e) {\n        secondsLeftInLiquidityGenerationEvent = 0\n      }\n\n      return {\n        liquidityGenerationOngoing,\n        totalETHContributed,\n        totalAMASTRContributed,\n        alphapoolsPriceEstimateAfterLGE,\n        alphapoolsMarketCapEstimateAfterLGE,\n        userETHContributed,\n        userAMASTRContributed,\n        lgeParticipationAgreement,\n        secondsLeftInLiquidityGenerationEvent,\n        lpPerETHUnit,\n        lpPerAMASTRUnit,\n        alphapoolsForAMASTRAllocate\n      }\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nexport const contributeETHForAlphaPoolsLGE = async (\n  provider: provider,\n  amount: string,\n  account: string\n) => {\n  const alphapoolsLGEContract = getAlphaPoolsLGEContract(provider, APOOL_LGE_ADDRESS)\n  const web3 = new Web3(provider)\n  const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n  const bntokens = web3.utils.toBN(tokens)\n  return alphapoolsLGEContract.methods\n    .addLiquidity(true)\n    .send({ from: account, value: bntokens})\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx)\n      return tx.transactionHash\n    })\n}\n\n\nexport const contributeAMASTRForAlphaPoolsLGE = async (\n  provider: provider,\n  amount: string,\n  account: string\n) => {\n  const alphapoolsLGEContract = getAlphaPoolsLGEContract(provider, APOOL_LGE_ADDRESS)\n  const web3 = new Web3(provider)\n  const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n  const bntokens = web3.utils.toBN(tokens)\n  return alphapoolsLGEContract.methods\n    .addLiquidityForAMASTR(true, bntokens)\n    .send({ from: account})\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx)\n      return tx.transactionHash\n    })\n}\n\nexport const claimETHxAPOOLLPToken = async (\n  provider: provider,\n  account: string | null\n) => {\n  try {\n    const alphapoolsLGEContract = getAlphaPoolsLGEContract(provider, APOOL_LGE_ADDRESS)\n    return alphapoolsLGEContract.methods\n      .claimLPTokens()\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const claimAMASTRxAPOOLLPToken = async (\n  provider: provider,\n  account: string | null\n) => {\n  try {\n    const alphapoolsLGEContract = getAlphaPoolsLGEContract(provider, APOOL_LGE_ADDRESS)\n    return alphapoolsLGEContract.methods\n      .claimLPTokensForAMASTR()\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\ninterface AlphaVaultsStats {\n  totalLPStaked: number\n  userLPStaked: BN\n  poolAPY: number\n  userClaimableAPOOL: number\n}\n\nexport const getAlphaPoolsAlphaVaultsStats = async (provider: provider, pid: number, account: string | null) : Promise<AlphaVaultsStats | null> => {\n  if (provider && pid != undefined && account) {\n    try {\n      const alphapoolsTokenContract = getNBUNIERC20Contract(provider, APOOL_TOKEN_ADDRESS)\n      const AlphaVaultsContract = getAlphaVaultsContract(provider, ALPHAVAULTS_ADDRESS)\n\n      const poolInfo = await AlphaVaultsContract.methods.poolInfo(pid).call()\n      const lpTokenContract = getERC20Contract(provider, poolInfo.token)\n\n      const epochCalculationStartBlock = await AlphaVaultsContract.methods.epochCalculationStartBlock().call()\n\n      const web3 = new Web3(provider)\n      const block = web3.eth.getBlock(epochCalculationStartBlock)\n      const epochCalculationStartTimestap = Number((await block).timestamp)\n\n      const rewardsInThisEpoch = await AlphaVaultsContract.methods.rewardsInThisEpoch().call() / 1e18\n\n      const totalLPSupply = await lpTokenContract.methods.totalSupply().call() / 1e18\n      const totalLPStaked = await lpTokenContract.methods.balanceOf(ALPHAVAULTS_ADDRESS).call() / 1e18\n      const totalAPOOLInUniswap = (await alphapoolsTokenContract.methods.balanceOf(poolInfo.token).call()) / 1e18\n\n      const userLPStaked = (await AlphaVaultsContract.methods.userInfo(pid, account).call()).amount\n\n      const totalRewardFullYear = rewardsInThisEpoch / ((Date.now() / 1000) - Number(epochCalculationStartTimestap)) * 24 * 3600 * 365\n\n      const poolAPY = totalRewardFullYear * Number(poolInfo.allocPoint) / APOOL_ALPHAVAULTS_TOTAL_POINT / ((totalLPStaked / totalLPSupply) * totalAPOOLInUniswap * 2)\n\n      const userClaimableAPOOL = await AlphaVaultsContract.methods.pendingAlphaPools(pid, account).call() / 1e18\n\n      return {\n        totalLPStaked,\n        userLPStaked,\n        poolAPY,\n        userClaimableAPOOL\n      }\n    } catch (e) {\n      console.log(e)\n      return null\n    }\n  } else {\n    return null\n  }\n}\n\nexport const AlphaVaultsClaim = async (\n  provider: provider,\n  pid: number,\n  account: string | null\n) => {\n  try {\n    const AlphaVaultsContract = getAlphaVaultsContract(provider, ALPHAVAULTS_ADDRESS)\n    return AlphaVaultsContract.methods\n      .getReward(pid)\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const AlphaVaultsStake = async (\n  provider: provider,\n  pid: number,\n  amount: string,\n  account: string\n) => {\n  const AlphaVaultsContract = getAlphaVaultsContract(provider, ALPHAVAULTS_ADDRESS)\n  const web3 = new Web3(provider)\n  const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n  const bntokens = web3.utils.toBN(tokens)\n  return AlphaVaultsContract.methods\n    .deposit(pid, bntokens)\n    .send({ from: account })\n    .on(\"transactionHash\", (tx) => {\n      console.log(tx)\n      return tx.transactionHash\n    })\n}\n\nexport const AlphaVaultsUnStake = async (\n  provider: provider,\n  pid: number,\n  amount: string,\n  account: string\n) => {\n  try {\n    const AlphaVaultsContract = getAlphaVaultsContract(provider, ALPHAVAULTS_ADDRESS)\n    const web3 = new Web3(provider)\n    const tokens = web3.utils.toWei(amount.toString(), \"ether\")\n    const bntokens = web3.utils.toBN(tokens)\n    return AlphaVaultsContract.methods\n      .withdraw(pid, bntokens)\n      .send({ from: account })\n      .on(\"transactionHash\", (tx) => {\n        console.log(tx)\n        return tx.transactionHash\n      })\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport const bnToDec = (bn: BigNumber, decimals = 18) => {\n  return bn.dividedBy(new BigNumber(10).pow(decimals)).toNumber()\n}\n\nexport const decToBn = (dec: number, decimals = 18) => {\n  return new BigNumber(dec).multipliedBy(new BigNumber(10).pow(decimals))\n}\n\nexport const decStrToBn = (str: string, decimals = 18) => {\n  return new BigNumber(str).multipliedBy(new BigNumber(10).pow(decimals))\n}\n\nexport const getFullDisplayBalance = (balance: BigNumber, format = 4, decimals = 18) => {\n  return balance.dividedBy(new BigNumber(10).pow(decimals)).toFormat(format)\n}\n\nexport const getFormattedDate = (timestamp: BigNumber) => {\n  return new Date(Number(timestamp.toFixed()) * 1000).toLocaleString()\n}\n\nexport const secondsToDhms = (seconds: number) => {\n  seconds = Number(seconds);\n  var d = Math.floor(seconds / (3600*24));\n  var h = Math.floor(seconds % (3600*24) / 3600);\n  var m = Math.floor(seconds % 3600 / 60);\n  //var s = Math.floor(seconds % 60);\n  \n  var dDisplay = d > 0 ? d + (d == 1 ? \" day, \" : \" days, \") : \"\";\n  var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\n  var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes\") : \"\";\n  //var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\n  //var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\n  return dDisplay + hDisplay + mDisplay;\n}","import { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { usePriceFeedContext } from \"../context/PriceFeedContext\"\nimport { getTotalValueLocked } from '../utils'\n\nexport const useTotalValueLocked = () => {\n\n  const [totalValueLockedInUSD, setTotalValueLockedInUSD] = useState<Number>(0)\n  const { coinGecko } = usePriceFeedContext()\n  const { ethereum }: { ethereum: provider } = useWallet()\n\n  const fetchTotalValue = useCallback(async () => {\n    if (!ethereum || !coinGecko) {\n      return\n    }\n    const totalValue = new Number(await getTotalValueLocked(ethereum, coinGecko))\n    setTotalValueLockedInUSD(totalValue)\n  }, [\n    ethereum,\n    coinGecko\n  ])\n\n  useEffect(() => {\n    if (coinGecko && ethereum) {\n      fetchTotalValue()\n      const refreshInterval = setInterval(fetchTotalValue, 270000)\n      return () => clearInterval(refreshInterval)\n    } else {\n      return\n    }\n  }, [\n    ethereum,\n    coinGecko,\n    fetchTotalValue,\n  ])\n\n  return totalValueLockedInUSD\n}","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { useCirculatingSupply } from '../hooks/useCirculatingSupply'\nimport { useAMASTRPrice } from '../hooks/useAMASTRPrice'\nimport { useTotalValueLocked } from '../hooks/useTotalValueLocked'\n\nexport default function Home() {\n  const circulatingSupply = useCirculatingSupply()\n  const price = useAMASTRPrice()\n  const totalValueLocked = useTotalValueLocked()\n\n  return (\n    <Container className=\"amastr-container text-center\">\n      <img\n        alt=\"\"\n        src=\"logo.svg\"\n        width=\"120\"\n        height=\"120\"\n        className=\"d-inline-block align-top\"\n        style={{margin: \"4px\"}}\n      />{' '}\n      <h1 className=\"amastr-bg-color-linear amastr-bg-color-linear-text amastr-brand-title pt-5\">\n        <span className=\"d-none d-md-block\">AlphaPools.Finance</span>\n        <span className=\"d-none d-sm-block d-md-none h1 display-4 font-weight-bold\">AlphaPools.Finance</span>\n        <span className=\"d-block d-sm-none h1 font-weight-bold\">AlphaPools.Finance</span>\n      </h1>\n      <p className=\"text-white-50\">This project is in beta. Use at your own risk.</p>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs=\"12\" md=\"6\" lg=\"4\" className=\"mt-2\">\n          <Card text={\"white\"} className=\"rounded-lg bg-transparent border-dark\"> \n            <Card.Body>\n              <Card.Title className=\"text-white small\">Circulating Supply</Card.Title>\n              <Card.Text>\n                {circulatingSupply ? \n                  <span className=\"text-white font-weight-bold h3\">{Number(circulatingSupply.toFixed(4)).toLocaleString()}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs=\"12\" md=\"6\" lg=\"4\" className=\"mt-2\">\n          <Card text={\"white\"} className=\"rounded-lg bg-transparent border-dark\"> \n            <Card.Body>\n              <Card.Title className=\"text-white small\">Market Cap</Card.Title>\n              <Card.Text>\n                {circulatingSupply && price ? \n                  <span className=\"text-white font-weight-bold h3\">{Number((Number(circulatingSupply) * Number(price)).toFixed(4)).toLocaleString()}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center\">\n        <Col xs=\"12\" md=\"6\" lg=\"4\" className=\"mt-2\">\n          <Card text={\"white\"} className=\"rounded-lg bg-transparent border-dark\"> \n            <Card.Body>\n              <Card.Title className=\"text-white small\">Price</Card.Title>\n              <Card.Text>\n                {price ? \n                  <span className=\"text-white font-weight-bold h3\">{Number(price.toFixed(4)).toLocaleString()}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs=\"12\" md=\"6\" lg=\"4\" className=\"mt-2\">\n          <Card text={\"white\"} className=\"rounded-lg bg-transparent border-dark\"> \n            <Card.Body>\n              <Card.Title className=\"text-white small\">Total Value Locked</Card.Title>\n              <Card.Text>\n                {totalValueLocked ? \n                  <span className=\"text-white font-weight-bold h3\">{Number(totalValueLocked.toFixed(2)).toLocaleString()}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { getCirculatingSupply } from '../utils'\n\nexport const useCirculatingSupply = () => {\n\n  const [circulatingSupply, setCirculatingSupply] = useState<Number>(0)\n  const { ethereum }: { ethereum: provider } = useWallet()\n\n  const fetchCirculatingSupply = useCallback(async () => {\n    if (!ethereum) {\n      return\n    }\n    const supply = new Number(await getCirculatingSupply(ethereum))\n    setCirculatingSupply(supply)\n  }, [\n    ethereum,\n  ])\n\n  useEffect(() => {\n    if (ethereum) {\n      fetchCirculatingSupply()\n      const refreshInterval = setInterval(fetchCirculatingSupply, 270000)\n      return () => clearInterval(refreshInterval)\n    } else {\n      return\n    }\n  }, [\n    ethereum,\n    fetchCirculatingSupply,\n  ])\n\n  return circulatingSupply\n}","import { useCallback, useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { usePriceFeedContext } from \"../context/PriceFeedContext\"\nimport { getAMASTRPrice } from '../utils'\n\nexport const useAMASTRPrice = () => {\n\n  const [amastrPrice, setAMASTRPrice] = useState<Number>(0)\n  const { coinGecko } = usePriceFeedContext()\n  const { ethereum }: { ethereum: provider } = useWallet()\n\n  const fetchCirculatingSupply = useCallback(async () => {\n    if (!ethereum || !coinGecko) {\n      return\n    }\n    const price = new Number(await getAMASTRPrice(ethereum, coinGecko))\n    setAMASTRPrice(price)\n  }, [\n    ethereum,\n  ])\n\n  useEffect(() => {\n    if (ethereum) {\n      fetchCirculatingSupply()\n      const refreshInterval = setInterval(fetchCirculatingSupply, 270000)\n      return () => clearInterval(refreshInterval)\n    } else {\n      return\n    }\n  }, [\n    ethereum,\n    fetchCirculatingSupply,\n  ])\n\n  return amastrPrice\n}","import React from 'react'\n\nexport default function PoolLogo({logos}) {\n  const generateLogo = (logos: string[]) => {\n    return logos.map((e, i) => (\n      <img\n        alt=\"\"\n        src={e}\n        width=\"23\"\n        height=\"23\"\n        className=\"d-inline-block align-middle mt-n1\"\n      />\n    ))\n  }\n\n  return (\n    <>\n      {generateLogo(logos)}\n    </>\n  )\n}","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport {\n  getFullDisplayBalance, \n  getFormattedDate\n} from '../utils'\nimport PoolLogo from './poolLogo'\n\nexport default function StakeCard({pool, poolAPY}) {\n  return (\n    <Card text={\"white\"} className=\"rounded-lg border-dark\"  bg={\"transparent\"}> \n      <Card.Body>\n        <Card.Title className=\"text-white-75 font-weight-bold\">\n            <Row className=\"AMASTR-text-height-2\">\n              <Col xs=\"6\">\n                <PoolLogo logos={pool?.logos ? pool.logos : []} />\n                {' '}\n                <span className=\"AMASTR-bg-color-linear AMASTR-bg-color-linear-text\">{pool?.name ? pool.name : ''}</span>\n              </Col>\n              <Col xs=\"6\" className=\"text-right\">\n                <Button href={\"/#/stake/\" + pool.id} variant=\"outline-light\" size=\"sm\">Deposit</Button>\n              </Col>\n            </Row>\n        </Card.Title>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">Total staked</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.totalStaked ?\n              <>\n                <span className=\"h5\">{getFullDisplayBalance(pool?.totalStaked)}</span>\n                {' '}\n                <span className=\"small\">{pool.tokenName}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">Pool rate</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.poolRate ?\n              <>\n                <span className=\"h5\">{getFullDisplayBalance(pool?.poolRate)}</span>\n                <span> </span>\n                <span className=\"small\">{pool.poolRateUnit}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">APY</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {poolAPY ?\n              <>\n                <span className=\"h5\">{Number(((poolAPY * 100).toFixed(2))).toLocaleString()}</span>\n                <span> </span>\n                <span className=\"small\">%</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\" className=\"small\">Halving time</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.halvingTime ?\n              <span className=\"small\">{getFormattedDate(pool?.halvingTime)}</span> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  )\n}\n","import {\n  WETH_POOL_ADDRESS,\n  WETH_TOKEN_ADDRESS,\n  AMASTR_POOL_ADDRESS,\n  AMASTR_TOKEN_ADDRESS,\n  ETH_AMASTR_UNI_LP_POOL_ADDRESS,\n  ETH_AMASTR_UNI_LP_TOKEN_ADDRESS,\n} from './tokenAddresses'\n\nexport const STAKE_POOLS = [\n  {\n    id: 'ETHAMASTR',\n    logos: [\"/images/eth.png\", \"/images/amastr.png\"],\n    name: 'ETH-AMASTR LP Pool',\n    address: ETH_AMASTR_UNI_LP_POOL_ADDRESS,\n    tokenAddress: ETH_AMASTR_UNI_LP_TOKEN_ADDRESS,\n    tokenName: 'ETH-AMASTR LP',\n    poolRateUnit: 'AMASTR / week'\n  },\n  {\n    id: 'WETH',\n    logos: [\"/images/weth.svg\"],\n    name: 'WETH Pool',\n    address: WETH_POOL_ADDRESS,\n    tokenAddress: WETH_TOKEN_ADDRESS,\n    tokenName: 'WETH',\n    poolRateUnit: 'AMASTR / week'\n  },\n  {\n    id: 'AMASTR',\n    logos: [\"/images/amastr.png\"],\n    name: 'AMASTR Pool',\n    address: AMASTR_POOL_ADDRESS,\n    tokenAddress: AMASTR_TOKEN_ADDRESS,\n    tokenName: 'AMASTR',\n    poolRateUnit: 'AMASTR / week'\n  },\n]","import {\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport BN from \"bignumber.js\"\nimport { STAKE_POOLS } from '../constants/stakePools'\nimport { getPoolStats } from '../utils'\nimport { provider } from \"web3-core\"\n\nexport interface IPool {\n  id: string\n  name: string\n  logos: string[]\n  address: string\n  tokenAddress: string\n  totalStaked: BN | null\n  halvingTime: BN | null\n  tokenName: string\n  poolRate: BN | null\n  poolRateUnit: string\n  unclaimed: BN | null\n  staked: BN | null\n}\n\nexport const usePoolStats = () => {  \n  const [pools, setPools] = useState<IPool[]>([])\n\n  const {\n    ethereum,\n    account,\n  }: { ethereum: provider; account: string | null } = useWallet()\n\n  const getStats = useCallback(async () => {\n    const promisedPoolsArr = STAKE_POOLS.map(async (pool) => {\n      const poolStats = await getPoolStats(\n        ethereum,\n        pool.address,\n        account\n      )\n      return {\n        id: pool.id,\n        name: pool.name,\n        logos: pool.logos,\n        address: pool.address,\n        tokenAddress: pool.tokenAddress,\n        tokenName: pool.tokenName,\n        poolRateUnit: pool.poolRateUnit,\n        totalStaked: poolStats?.totalStaked ? new BN(poolStats?.totalStaked) : null,\n        halvingTime: poolStats?.halvingTime ? new BN(poolStats?.halvingTime) : null,\n        poolRate: poolStats?.poolRate ? new BN(poolStats?.poolRate) : null,\n        unclaimed: poolStats?.unclaimed ? new BN(poolStats?.unclaimed) : null,\n        staked: poolStats?.staked ? new BN(poolStats?.staked) : null,\n      }\n    })\n\n    const resolvedPool = await Promise.all(promisedPoolsArr)\n    setPools(resolvedPool)\n  }, [ethereum, account])\n\n  useEffect(() => {\n    getStats()\n    const refreshInterval = setInterval(getStats, 270000)\n    return () => clearInterval(refreshInterval)\n  }, [getStats])\n\n  return pools\n}","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport StakeCard from '../components/stakeCard'\nimport Spinner from 'react-bootstrap/Spinner'\nimport { usePoolStats } from '../hooks/usePoolStats'\nimport { usePoolAPY } from '../hooks/usePoolAPY'\nimport { useTotalValueLocked } from '../hooks/useTotalValueLocked'\n\nexport default function Stake() {\n\n  const pools = usePoolStats()\n  const poolAPY = usePoolAPY()\n  const totalValueLocked = useTotalValueLocked()\n\n  return (\n    <Container className=\"amastr-container\">\n      <Row className=\"justify-content-md-center\">\n        <Col xs lg=\"6\">\n          <Card text={\"white\"} className=\"rounded-lg border-0 amastr-bg-color-linear\"> \n            <Card.Body>\n              <Card.Title className=\"text-white-75 font-weight-bold\">Stake (Not Live)</Card.Title>\n              <Card.Text className=\"text-white-70 small\">\n                Deposit your WETH / AMASTR / Liquidity Provider tokens to receive AMASTR.\n              </Card.Text>\n              <Card.Text className=\"text-white-70 small\">\n                AMASTR will be the governance token of AlphaPools.Finance, hold AMASTR to receive dividends from future projects such as vault, lending, AlphaSwap and NFT's.\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center pt-4\">\n        <Col xs lg=\"3\">\n          <span className=\"text-white font-weight-bold\">AMASTR Pools Not Live, see Vaults to farm APOOL</span>\n        </Col>\n        <Col xs lg=\"3\" className=\"text-right text-white\">\n          {totalValueLocked ?\n            <>\n              <span>TVL: {Number(totalValueLocked.toFixed(2)).toLocaleString()}</span>\n              <span> </span>\n              <span className=\"small\">USD</span>\n            </> :\n            <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n          }\n        </Col>\n      </Row>\n\n      {pools && pools.map((pool, e) => {\n        return (\n          <Row className=\"justify-content-md-center pt-4\">\n            <Col xs lg=\"6\">\n              <StakeCard pool={pool} poolAPY={poolAPY ? (poolAPY[pool?.id] ? poolAPY[pool?.id] : 0) : 0} />\n            </Col>\n          </Row>\n        )})\n      }\n      \n    </Container>\n  )\n}","import {\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { getPoolAPY } from '../utils'\nimport { provider } from \"web3-core\"\n\nexport interface IPoolAPY {\n  WETH: number | null | undefined\n  AMASTR: number | null | undefined\n  ETHAMASTR: number | null | undefined\n}\n\nexport const usePoolAPY = () => {  \n  const [poolAPY, setPoolAPY] = useState<IPoolAPY>()\n\n  const {\n    ethereum,\n    account,\n  }: { ethereum: provider; account: string | null } = useWallet()\n\n  const getPoolAPYs = useCallback(async () => {\n    const promisedPoolsAPY = async () => {\n      const poolAPYs = await getPoolAPY(\n        ethereum\n      )\n      return {\n        WETH: poolAPYs?.wethPoolAPY,\n        AMASTR: poolAPYs?.amastrPoolAPY,\n        ETHAMASTR: poolAPYs?.ethAMASTRPoolAPY,\n      }\n    }\n\n    const resolvedPoolAPY = await promisedPoolsAPY()\n    setPoolAPY(resolvedPoolAPY)\n  }, [ethereum, account])\n\n  useEffect(() => {\n    getPoolAPYs()\n    const refreshInterval = setInterval(getPoolAPYs, 270000)\n    return () => clearInterval(refreshInterval)\n  }, [getPoolAPYs])\n\n  return poolAPY\n}","import React from 'react'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport PoolLogo from './poolLogo'\nimport {\n  getFullDisplayBalance, \n} from '../utils'\n\nexport default function AlphaPoolsFarmCard({pool}) {\n  return (\n    <Card text={\"white\"} className=\"rounded-lg border-dark\"  bg={\"transparent\"}> \n      <Card.Body>\n        <Card.Title className=\"text-white-75 font-weight-bold\">\n            <Row className=\"amastr-text-height-2\">\n              <Col xs=\"8\">\n                <PoolLogo logos={pool?.logos ? pool.logos : []} />\n                {' '}\n                <span className=\"amastr-bg-color-linear amastr-bg-color-linear-text\">{pool?.name ? pool.name : ''}</span>\n              </Col>\n              <Col xs=\"4\" className=\"text-right\">\n                <Button href={\"/#/alphavaults/\" + pool.path} variant=\"outline-light\" size=\"sm\">Deposit</Button>\n              </Col>\n            </Row>\n        </Card.Title>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">Total staked</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.totalLPStaked != undefined ?\n              <>\n                <span className=\"h5\">{pool?.totalLPStaked.toFixed(4)}</span>\n                {' '}\n                <span className=\"small\">{pool.tokenName}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">You staked</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.userLPStaked != undefined ?\n              <>\n                <span className=\"h5\">{getFullDisplayBalance(pool?.userLPStaked, 4)}</span>\n                {' '}\n                <span className=\"small\">{pool.tokenName}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n        <Row className=\"text-white-70 mt-2\">\n          <Col xs=\"6\">APY</Col>\n          <Col xs=\"6\" className=\"text-right\">\n            {pool?.poolAPY != undefined ?\n              <>\n                <span className=\"h5\">{Number(((pool?.poolAPY * 100).toFixed(2))).toLocaleString()}</span>\n                <span> </span>\n                <span className=\"small\">%</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  )\n}\n","import {\n  useState,\n  useEffect,\n  useCallback,\n} from \"react\"\nimport BN from \"bignumber.js\"\nimport { useWallet } from \"use-wallet\"\nimport { getAlphaPoolsAlphaVaultsStats } from '../../utils'\nimport { provider } from \"web3-core\"\nimport { APOOL_FARM_POOLS } from '../../constants/alphapoolsFarmPool'\n\nexport interface IAlphaVaultsStats {\n  id: number\n  path: string\n  name: string\n  logos: string[]\n  tokenName: string\n  tokenAddress: string\n  totalLPStaked: number | undefined\n  userLPStaked: BN | null\n  poolAPY: number | undefined\n  userClaimableAPOOL: number | undefined\n}\n\nexport const useAlphaVaultsStats = () => {  \n  const [AlphaVaultsStatus, setAlphaVaultsStats] = useState<IAlphaVaultsStats[]>([])\n\n  const {\n    ethereum,\n    account,\n  }: { ethereum: provider; account: string | null } = useWallet()\n\n  const getAlphaVaultsStats = useCallback(async () => {\n    const promisedAlphaVaultsStatsArr = APOOL_FARM_POOLS.map(async (pool) => {\n      const _AlphaVaultsStats = await getAlphaPoolsAlphaVaultsStats(\n        ethereum,\n        pool.id,\n        account\n      )\n      return {\n        id: pool.id,\n        path: pool.path,\n        name: pool.name,\n        logos: pool.logos,\n        tokenName: pool.tokenName,\n        tokenAddress: pool.tokenAddress,\n        totalLPStaked: _AlphaVaultsStats?.totalLPStaked,\n        userLPStaked: _AlphaVaultsStats?.userLPStaked ? new BN(_AlphaVaultsStats?.userLPStaked) : null,\n        poolAPY: _AlphaVaultsStats?.poolAPY,\n        userClaimableAPOOL: _AlphaVaultsStats?.userClaimableAPOOL,\n      }\n    })\n\n    const resolvedAlphaVaultsStatsArr = await Promise.all(promisedAlphaVaultsStatsArr)\n    setAlphaVaultsStats(resolvedAlphaVaultsStatsArr)\n  }, [ethereum, account])\n\n  useEffect(() => {\n    getAlphaVaultsStats()\n    const refreshInterval = setInterval(getAlphaVaultsStats, 270000)\n    return () => clearInterval(refreshInterval)\n  }, [getAlphaVaultsStats])\n\n  return AlphaVaultsStatus\n}","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\nimport AlphaPoolsFarmCard from '../components/AlphaPoolsFarmCard'\nimport { useAlphaVaultsStats } from '../hooks/alphapools/useAlphaVaultsStats'\n\nexport default function AlphaVaults() {\n\n  const AlphaVaultsStats = useAlphaVaultsStats()\n\n  return (\n    <Container className=\"sfi-container\">\n      <Row className=\"justify-content-md-center\">\n        <Col xs lg=\"6\">\n          <Card text={\"white\"} className=\"rounded-lg border-0 sfi-bg-color-linear\"> \n            <Card.Body>\n              <Card.Title className=\"text-white-75 font-weight-bold\">AlphaVaults</Card.Title>\n              <Card.Text className=\"text-white-70\">\n                AlphaVaults is a project within the AlphaPools ecosystem that introduces a deflationary farming coin - APOOL.\n              </Card.Text>\n              <Card.Text className=\"text-white-70\">\n                <li><a target=\"_blank\" href=\"https://medium.com/@alphapools\">APOOL Tokenomics</a></li>\n                <li><a target=\"_blank\" href=\"https://www.dextools.io/app/uniswap/pair-explorer/\">APOOL dextools</a></li>\n                <li><a target=\"_blank\" href=\"https://app.uniswap.org/#/swap\">Buy APOOL</a></li>\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center mt-4\">\n        <Col xs lg=\"6\">\n          <Tabs defaultActiveKey=\"farm\" transition={false} id=\"noanim-tab-example\">\n            <Tab eventKey=\"farm\" title=\"Farm\">\n              {AlphaVaultsStats && AlphaVaultsStats.map((pool, e) => {\n                return (\n                  <Row className=\"justify-content-md-center pt-4\">\n                    <Col xs lg=\"12\">\n                      <AlphaPoolsFarmCard pool={pool} />\n                    </Col>\n                  </Row>\n                )})\n              }\n            </Tab>\n          </Tabs>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import { useCallback, useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from 'use-wallet'\nimport { provider } from 'web3-core'\nimport { getTokenBalance } from '../utils'\n\nexport const useTokenBalance = (accountAddress?: string | null, tokenAddress?: string | null, decimals = 18) => {\n\n  const [balance, setBalance] = useState<BigNumber>()\n  const { ethereum }: { ethereum: provider } = useWallet()\n\n  const fetchBalance = useCallback(async () => {\n    if (!accountAddress || !ethereum || !tokenAddress) {\n      return\n    }\n    const bal = new BigNumber(await getTokenBalance(ethereum, tokenAddress, accountAddress))\n    setBalance(bal)\n  }, [\n    accountAddress,\n    ethereum,\n    tokenAddress,\n  ])\n\n  useEffect(() => {\n    if (accountAddress && ethereum) {\n      fetchBalance()\n      const refreshInterval = setInterval(fetchBalance, 5000)\n      return () => clearInterval(refreshInterval)\n    } else {\n      return\n    }\n  }, [\n    accountAddress,\n    decimals,\n    ethereum,\n    tokenAddress,\n    fetchBalance,\n  ])\n\n  return balance\n}","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { approve } from \"../utils\"\n\nexport const useApprove = (tokenAddress: string, poolAddress: string) => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(ethereum, tokenAddress, poolAddress, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, tokenAddress, poolAddress, ethereum])\n\n  return {\n    onApprove: handleApprove\n  }\n}","import { useCallback, useEffect, useState } from \"react\"\nimport BN from \"bignumber.js\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { getAllowance } from \"../utils\"\n\nexport const useAllowance = (tokenContract: string, poolAddress: string) => {\n  const [allowance, setAllowance] = useState(new BN(\"0\"))\n  const {\n    account,\n    ethereum,\n  }: { account: any; ethereum: provider } = useWallet()\n\n  const fetchAllowance = useCallback(async () => {\n    const allowance = new BN(\n      await getAllowance(ethereum, tokenContract, poolAddress, account)\n    )\n    setAllowance(allowance)\n  }, [account, poolAddress, tokenContract, ethereum])\n\n  useEffect(() => {\n    if (account) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 5000)\n    return () => clearInterval(refreshInterval)\n  }, [account, fetchAllowance])\n\n  return allowance\n}","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { stake, unstake } from \"../utils\"\n\nexport const useStake = (poolContract: string) => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (account) {\n        const txHash = await stake(ethereum, poolContract, amount, account)\n        return txHash\n      }\n    },\n    [account, poolContract, ethereum]\n  )\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (account) {\n        const txHash = await unstake(ethereum, poolContract, amount, account)\n        return txHash\n      }\n    },\n    [account, poolContract, ethereum]\n  )\n\n  return { onStake: handleStake, onUnstake: handleUnstake }\n}","import React, { useCallback, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport PoolLogo from '../components/poolLogo'\nimport BN from \"bignumber.js\"\nimport { useTokenBalance } from '../hooks/useTokenBalance'\nimport { useClaimRewards } from '../hooks/useClaimRewards'\nimport { useApprove } from '../hooks/useApprove'\nimport { useAllowance } from '../hooks/useAllowance'\nimport { useStake } from \"../hooks/useStake\"\nimport { useExit } from \"../hooks/useExit\"\nimport {\n  getFullDisplayBalance,\n  decStrToBn\n} from '../utils'\n\nexport default function StakePanel({pool}) {\n  const allowance: BN = useAllowance(pool.tokenAddress, pool.address)\n\n  const { onApprove } = useApprove(pool.tokenAddress, pool.address)\n  const [requestedApproval, setRequestedApproval] = useState<boolean>(false)\n\n  const { onStake } = useStake(pool.address)\n  const [requestedStake, setRequestedStake] = useState<boolean>(false)\n\n  const { onUnstake } = useStake(pool.address)\n  const [requestedUnstake, setRequestedUnstake] = useState<boolean>(false)\n  \n  const { account } = useWallet()\n  const tokenBalance = useTokenBalance(account, pool?.tokenAddress)\n  const { staked } = pool\n\n  const [ stakeAmount, setStakeAmount ] = useState<string>(\"\")\n  const [ unstakeAmount, setUnstakeAmount ] = useState<string>(\"\")\n\n  const [requestedClaim, setRequestedClaim] = useState<boolean>(false)\n  const {onClaim } = useClaimRewards(pool?.address)\n\n  const { onExit } = useExit()\n  const [requestedExit, setRequestedExit] = useState<boolean>(false)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onClaim()\n      if (!txHash) {\n        throw new Error(\"Transactions error\")\n      } else {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedClaim(false)\n    }\n  }, [onClaim, setRequestedClaim])\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedApproval(false)\n    }\n  }, [onApprove, setRequestedApproval])\n\n  const handlePercentageStakeInputs = (percentage) => {\n    const numberBalance = tokenBalance ? tokenBalance.dividedBy(new BN(10).pow(new BN(18))) : new BN(0)\n    const stringValue = (numberBalance.multipliedBy(percentage).toFixed(4, 1)).toString()\n    setStakeAmount(stringValue)\n  }\n\n  const handlePercentageUnstakeInputs = (percentage) => {\n    const numberBalance = staked ? staked.dividedBy(new BN(10).pow(new BN(18))) : new BN(0)\n    const stringValue = (numberBalance.multipliedBy(percentage).toFixed(4, 1)).toString()\n    setUnstakeAmount(stringValue)\n  }\n\n  const handleStake = useCallback(async () => {\n    try {\n      setRequestedStake(true)\n      const txHash = await onStake(stakeAmount)\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedStake(false)\n        setStakeAmount(\"\")\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedStake(false)\n    }\n  }, [stakeAmount, onStake])\n\n  const handleUnstake = useCallback(async () => {\n    try {\n      setRequestedUnstake(true)\n      const txHash = await onUnstake(unstakeAmount)\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedUnstake(false)\n        setUnstakeAmount(\"\")\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedUnstake(false)\n    }\n  }, [unstakeAmount, onUnstake])\n\n  const handleExit = useCallback(async () => {\n    try {\n      setRequestedExit(true)\n      const txHash = await onExit(pool.address)\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedExit(false)\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedExit(false)\n    }\n  }, [onExit, pool, setRequestedExit])\n\n  const shouldDisableClaimButton = () => {\n    return pool?.unclaimed <= 0 || requestedClaim || requestedExit\n  }\n\n  const shouldDisableStakeButton = () => {\n    return requestedExit || requestedStake || !account || !stakeAmount || decStrToBn(stakeAmount).isLessThanOrEqualTo(new BN(0)) || decStrToBn(stakeAmount).isGreaterThan(tokenBalance ? tokenBalance : new BN(0))\n  }\n\n  const shouldDisableUnstakeButton = () => {\n    return requestedExit || requestedUnstake || !account || !unstakeAmount ||  decStrToBn(unstakeAmount).isLessThanOrEqualTo(new BN(0)) || decStrToBn(unstakeAmount).isGreaterThan(pool?.staked)\n  }\n\n  const generateInformationCard = (title, value, unit) => {\n    return (\n      <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n        <Card.Body>\n          <Card.Title className=\"small\">{title}</Card.Title>\n          <div className=\"text-center\">\n            {value ?\n              <>\n                <span className=\"h3\">{getFullDisplayBalance(value, 2)}</span>\n                <span> </span>\n                <span className=\"small\">{unit}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </div>\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  return (\n    <Container className=\"AMASTR-container font-weight-bold\">\n      <Row className=\"justify-content-md-center text-white\">\n        <Col xs lg=\"3\">\n          <span className=\"AMASTR-bg-color-linear AMASTR-bg-color-linear-text h5\">{pool.name}</span>\n        </Col>\n        <Col xs lg=\"3\" className=\"text-right\">\n          <PoolLogo logos={pool?.logos ? pool.logos : []} />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-2\">\n        <Col xs lg=\"3\">\n          {generateInformationCard(\"Total deposits\", pool?.totalStaked, pool.tokenName)}\n        </Col>\n        <Col xs lg=\"3\">\n          {generateInformationCard(\"Pool Rate\", pool?.poolRate, pool.poolRateUnit)}\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-4\">\n        <Col xs lg=\"6\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Your unclaimed AMASTR</Card.Title>\n              <div className=\"text-center p-2\">\n                {pool?.unclaimed ?\n                  <span className=\"h3\">{getFullDisplayBalance(pool?.unclaimed, 8)}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </div>\n              <div className=\"text-center mt-2\">\n                <Button variant=\"outline-primary\"\n                        disabled={shouldDisableClaimButton()}\n                        onClick={() => handleClaim()}>\n                  {requestedClaim ? \"Claiming\" : \"Claim AMASTR\"}\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-4\">\n        <Col xs lg=\"3\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Your wallet</Card.Title>\n              <div className=\"text-right\">\n                <span className=\"small\">\n                  {tokenBalance ? \n                    getFullDisplayBalance(tokenBalance, 4) :\n                    <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" size=\"sm\" />\n                  }\n                </span>\n                <span> </span>\n                <span className=\"small\">{pool.tokenName}</span>\n              </div>\n              <Form>\n                <Form.Group>\n                  <Form.Control size=\"sm\" type=\"text\" placeholder=\"Amount\" value={stakeAmount} onChange={(e) => {setStakeAmount(e.target.value)}} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}/>\n                </Form.Group>\n              </Form>\n              <ButtonToolbar className=\"justify-content-center mt-n2 mb-3\">\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.25)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>25%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.5)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>50%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.75)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>75%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(1)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>100%</Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n              <div className=\"text-center\">\n                {!allowance.toNumber() ?\n                  <Button variant=\"outline-primary\"\n                          disabled={requestedApproval || !account}\n                          onClick={() => handleApprove()}>\n                    {requestedApproval ? \"Approving\" : \"Approve \" + pool.tokenName}\n                  </Button> :\n                  <Button variant=\"outline-primary\"\n                          disabled={shouldDisableStakeButton()}\n                          onClick={() => handleStake()}>\n                    {requestedStake ? \"Staking\" : \"Stake \" + pool.tokenName}\n                  </Button>\n                }\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs lg=\"3\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Staked token</Card.Title>\n              <div className=\"text-right\">\n                <span className=\"small\">\n                  {pool?.staked ?\n                    getFullDisplayBalance(pool?.staked, 4) : \n                    <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" size=\"sm\" />\n                  }\n                </span>\n                <span> </span>\n                <span className=\"small\">{pool.tokenName}</span>\n              </div>\n              <Form>\n                <Form.Group>\n                  <Form.Control size=\"sm\" type=\"text\" placeholder=\"Amount\" value={unstakeAmount} onChange={(e) => {setUnstakeAmount(e.target.value)}} disabled={!pool?.staked?.toFixed()}/>\n                </Form.Group>\n              </Form>\n              <ButtonToolbar className=\"justify-content-center mt-n2 mb-3\">\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.25)} disabled={!pool?.staked?.toFixed()}>25%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.5)} disabled={!pool?.staked?.toFixed()}>50%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.75)} disabled={!pool?.staked?.toFixed()}>75%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(1)} disabled={!pool?.staked?.toFixed()}>100%</Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n              <div className=\"text-center\">\n                <Button variant=\"outline-primary\"\n                        disabled={shouldDisableUnstakeButton()}\n                        onClick={() => handleUnstake()}>\n                  {requestedUnstake ? \"Unstaking\" : \"Unstake \" + pool.tokenName}\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-4\">\n        <Col xs lg=\"6\" className=\"text-center\">\n          <Button variant=\"outline-primary\"\n                  disabled={requestedExit || (shouldDisableClaimButton() && shouldDisableUnstakeButton())}\n                  onClick={() => handleExit()}>\n            {requestedExit ? \"Unstake All and Claim...\" : \"Unstake All and Claim\"}\n          </Button>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { claim } from \"../utils\"\n\nexport const useClaimRewards = (poolContract: string) => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleClaim = useCallback(async () => {\n    if (account) {\n      const txHash = await claim(ethereum, poolContract, account)\n      return txHash\n    }\n  }, [account, poolContract, ethereum])\n\n  return { onClaim: handleClaim }\n}\n","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { exit } from \"../utils\"\n\nexport const useExit = () => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleExit = useCallback(\n    async (poolContract: string) => {\n      if (account) {\n        const txHash = await exit(ethereum, poolContract, account)\n        return txHash\n      }\n    },\n    [account, ethereum]\n  )\n\n  return { onExit: handleExit }\n}","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { usePoolStats } from '../hooks/usePoolStats'\nimport StakePanel from '../components/stakePanel'\n\ninterface ParamTypes {\n  id: string\n}\n\nexport default function Pool() {\n  const { id } = useParams<ParamTypes>()\n\n  const pools = usePoolStats()\n  const pool = pools.find((e, i) => {return (e.id === id)})\n\n  if (id && pools.length > 0 && pool) {\n    return (\n      <StakePanel pool={pool} />\n    )\n  } else {\n    return (<></>)\n  }\n}","import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Card from 'react-bootstrap/Card'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Image from 'react-bootstrap/Image'\n\nexport default function About() {\n  return (\n    <Container className=\"amastr-container\">\n      <Row className=\"text-center\">\n        <Col>\n          <img\n            alt=\"\"\n            src=\"logo.svg\"\n            width=\"120\"\n            height=\"120\"\n            className=\"d-inline-block align-top\"\n            style={{margin: \"4px\"}}\n          />{' '}\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg=\"8\">\n          <Card border=\"dark\" bg={\"transparent\"} className=\"text-white-50\">\n            <Card.Body>\n              <Card.Title className=\"h1 amastr-bg-color-linear amastr-bg-color-linear-text font-weight-bold\">About AlphaPools Finance</Card.Title>\n              <Card.Text>\n              AlphaPools Finance is a decentralised DeFi ecosystem that will allow its users to farm APOOL by adding liquidity. Our main token APOOL is deflationary with a taxation system of 1.5% which will go towards the farming rewards which means that it remains sustainable and the supply will never exceed 270,000.\n              </Card.Text>\n              <Card.Text>\n              We are not interested in being just another fork. We will use AlphaPools Finance to build an entire ecosystem. \n              </Card.Text>\n              <Card.Text>\n              The community is an integral component of our future roadmap - Join the conversation on <a target=\"_blank\" href=\"https://t.me/alphapools\">Telegram</a>.\n              </Card.Text>\n            </Card.Body>\n          </Card>\n        </Col>\n        \n      </Row>\n\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg=\"8\">\n          <Card border=\"dark\" bg={\"transparent\"} className=\"text-white-50\">\n            <Card.Body>\n              <Card.Title className=\"h1 amastr-bg-color-linear amastr-bg-color-linear-text font-weight-bold\">Blueprint</Card.Title>\n              <Image src=\"blueprint.svg\" className=\"border border-0 bg-transparent\" thumbnail />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg=\"8\">\n          <Card border=\"dark\" bg={\"transparent\"} className=\"text-white-50\">\n            <Card.Body>\n              <Card.Title className=\"h1 amastr-bg-color-linear amastr-bg-color-linear-text font-weight-bold\">About AMASTR</Card.Title>\n              <Card.Text>\n              AMASTR is the governance token of AlphaPools.Finance. No presale. No premine. This will come later down the line.\n              </Card.Text>\n              <Card.Text>\n              Token Contract: <a target=\"_blank\" href=\"https://etherscan.io\">ComingSoon</a>\n              </Card.Text>\n              <Card.Text className=\"font-weight-bold\">\n              Total Supply: 10,000\n              </Card.Text>\n              <Card.Text className=\"font-weight-bold\">\n              Allocation:\n              </Card.Text>\n              <div>\n                <li>This Feature Will Be Unlocked Soon</li>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center mt-5\">\n        <Col lg=\"8\">\n          <Card border=\"dark\" bg={\"transparent\"} className=\"text-white-50\">\n            <Card.Body>\n              <Card.Title className=\"h1 amastr-bg-color-linear amastr-bg-color-linear-text font-weight-bold\">About Staking</Card.Title>\n              <Card.Text>\n                Feature Coming Soon.\n              </Card.Text>\n              <Card.Text className=\"font-weight-bold\">\n                WETH Pool: \n              </Card.Text>\n              <div>\n                <li>Contract: <a target=\"_blank\" href=\"https://etherscan.io/\">Not Yet Available</a> </li>\n                <span>Switch your ETH to WETH: <a target=\"_blank\" href=\"https://relay.radar.tech/\">https://relay.radar.tech</a></span>      \n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { AlphaVaultsClaim } from \"../../utils\"\n\nexport const useAlphaVaultsClaim = (pid: number) => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleAlphaVaultsClaim = useCallback(async () => {\n    if (account) {\n      const txHash = await AlphaVaultsClaim(ethereum, pid, account)\n      return txHash\n    }\n  }, [account, ethereum])\n\n  return { onAlphaVaultsClaim: handleAlphaVaultsClaim }\n}\n","import { useCallback } from \"react\"\nimport { useWallet } from \"use-wallet\"\nimport { provider } from \"web3-core\"\nimport { AlphaVaultsStake, AlphaVaultsUnStake } from \"../../utils\"\n\nexport const useAlphaVaultsStake = (pid: number) => {\n  const {\n    account,\n    ethereum,\n  }: { account: string | null; ethereum: provider } = useWallet()\n\n  const handleAlphaVaultsStake = useCallback(\n    async (amount: string) => {\n      if (account) {\n        const txHash = await AlphaVaultsStake(ethereum, pid, amount, account)\n        return txHash\n      }\n    },\n    [account, ethereum]\n  )\n\n  const handleAlphaVaultsUnStake = useCallback(\n    async (amount: string) => {\n      if (account) {\n        const txHash = await AlphaVaultsUnStake(ethereum, pid, amount, account)\n        return txHash\n      }\n    },\n    [account, ethereum]\n  )\n\n  return { onAlphaVaultsStake: handleAlphaVaultsStake, onAlphaVaultsUnStake: handleAlphaVaultsUnStake }\n}","import React, { useCallback, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport PoolLogo from '../components/poolLogo'\nimport BN from \"bignumber.js\"\nimport { useTokenBalance } from '../hooks/useTokenBalance'\nimport { useAlphaVaultsClaim } from '../hooks/alphapools/useAlphaVaultsClaim'\nimport { useApprove } from '../hooks/useApprove'\nimport { useAllowance } from '../hooks/useAllowance'\nimport { useAlphaVaultsStake } from \"../hooks/alphapools/useAlphaVaultsStake\"\nimport {\n  getFullDisplayBalance,\n  decStrToBn\n} from '../utils'\nimport {\n  ALPHAVAULTS_ADDRESS,\n} from '../constants/tokenAddresses'\n\nexport default function AlphaPoolsFarmPanel({pool}) {\n  const allowance: BN = useAllowance(pool.tokenAddress, ALPHAVAULTS_ADDRESS)\n\n  const { onApprove } = useApprove(pool.tokenAddress, ALPHAVAULTS_ADDRESS)\n  const [requestedApproval, setRequestedApproval] = useState<boolean>(false)\n\n  const { onAlphaVaultsStake } = useAlphaVaultsStake(pool.id)\n  const [requestedStake, setRequestedStake] = useState<boolean>(false)\n\n  const { onAlphaVaultsUnStake } = useAlphaVaultsStake(pool.id)\n  const [requestedUnstake, setRequestedUnstake] = useState<boolean>(false)\n  \n  const { account } = useWallet()\n  const tokenBalance = useTokenBalance(account, pool?.tokenAddress)\n  const { userLPStaked } = pool\n\n  const [ stakeAmount, setStakeAmount ] = useState<string>(\"\")\n  const [ unstakeAmount, setUnstakeAmount ] = useState<string>(\"\")\n\n  const [requestedClaim, setRequestedClaim] = useState<boolean>(false)\n  const { onAlphaVaultsClaim } = useAlphaVaultsClaim(pool?.id)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onAlphaVaultsClaim()\n      if (!txHash) {\n        throw new Error(\"Transactions error\")\n      } else {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedClaim(false)\n    }\n  }, [onAlphaVaultsClaim, setRequestedClaim])\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedApproval(false)\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedApproval(false)\n    }\n  }, [onApprove, setRequestedApproval])\n\n  const handlePercentageStakeInputs = (percentage) => {\n    const numberBalance = tokenBalance ? tokenBalance.dividedBy(new BN(10).pow(new BN(18))) : new BN(0)\n    const stringValue = (numberBalance.multipliedBy(percentage).toFixed(4, 1)).toString()\n    setStakeAmount(stringValue)\n  }\n\n  const handlePercentageUnstakeInputs = (percentage) => {\n    const numberBalance = userLPStaked ? userLPStaked.dividedBy(new BN(10).pow(new BN(18))) : new BN(0)\n    const stringValue = (numberBalance.multipliedBy(percentage).toFixed(4, 1)).toString()\n    setUnstakeAmount(stringValue)\n  }\n\n  const handleStake = useCallback(async () => {\n    try {\n      setRequestedStake(true)\n      const txHash = await onAlphaVaultsStake(stakeAmount)\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedStake(false)\n        setStakeAmount(\"\")\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedStake(false)\n    }\n  }, [stakeAmount, onAlphaVaultsStake])\n\n  const handleUnstake = useCallback(async () => {\n    try {\n      setRequestedUnstake(true)\n      const txHash = await onAlphaVaultsUnStake(unstakeAmount)\n      if (!txHash) {\n        throw new Error(\"Transaction error\")\n      } else {\n        setRequestedUnstake(false)\n        setUnstakeAmount(\"\")\n      }\n    } catch (e) {\n      console.log(e)\n      setRequestedUnstake(false)\n    }\n  }, [unstakeAmount, onAlphaVaultsUnStake])\n\n  const shouldDisableClaimButton = () => {\n    return pool?.userClaimableAPOOL <= 0 || requestedClaim\n  }\n\n  const shouldDisableStakeButton = () => {\n    return requestedStake || !account || !stakeAmount || decStrToBn(stakeAmount).isLessThanOrEqualTo(new BN(0)) || decStrToBn(stakeAmount).isGreaterThan(tokenBalance ? tokenBalance : new BN(0))\n  }\n\n  const shouldDisableUnstakeButton = () => {\n    return requestedUnstake || !account || !unstakeAmount ||  decStrToBn(unstakeAmount).isLessThanOrEqualTo(new BN(0)) || decStrToBn(unstakeAmount).isGreaterThan(pool?.userLPStaked)\n  }\n\n  const generateInformationCard = (title, value, unit) => {\n    return (\n      <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n        <Card.Body>\n          <Card.Title className=\"small\">{title}</Card.Title>\n          <div className=\"text-center\">\n            {value ?\n              <>\n                <span className=\"h3\">{value.toFixed(4)}</span>\n                <span> </span>\n                <span className=\"small\">{unit}</span>\n              </> :\n              <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n            }\n          </div>\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  return (\n    <Container className=\"sfi-container font-weight-bold\">\n      <Row className=\"justify-content-md-center text-white\">\n        <Col xs lg=\"3\">\n          <span className=\"sfi-bg-color-linear sfi-bg-color-linear-text h5\">{pool.name}</span>\n        </Col>\n        <Col xs lg=\"3\" className=\"text-right\">\n          <PoolLogo logos={pool?.logos ? pool.logos : []} />\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-2\">\n        <Col xs lg=\"6\">\n          {generateInformationCard(\"Total deposits\", pool?.totalLPStaked, pool.tokenName)}\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-4\">\n        <Col xs lg=\"6\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Your unclaimed APOOL</Card.Title>\n              <div className=\"text-center p-2\">\n                {pool?.userClaimableAPOOL != undefined ?\n                  <span className=\"h3\">{pool?.userClaimableAPOOL.toFixed(8)}</span> :\n                  <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" />\n                }\n              </div>\n              <div className=\"text-center mt-2\">\n                <Button variant=\"outline-primary\"\n                        disabled={shouldDisableClaimButton()}\n                        onClick={() => handleClaim()}>\n                  {requestedClaim ? \"Claiming\" : \"Claim APOOL\"}\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row className=\"justify-content-md-center text-white mt-4\">\n        <Col xs lg=\"3\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Your wallet</Card.Title>\n              <div className=\"text-right\">\n                <span className=\"small\">\n                  {tokenBalance ? \n                    getFullDisplayBalance(tokenBalance, 4) :\n                    <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" size=\"sm\" />\n                  }\n                </span>\n                <span> </span>\n                <span className=\"small\">{pool.tokenName}</span>\n              </div>\n              <Form>\n                <Form.Group>\n                  <Form.Control size=\"sm\" type=\"text\" placeholder=\"Amount\" value={stakeAmount} onChange={(e) => {setStakeAmount(e.target.value)}} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}/>\n                </Form.Group>\n              </Form>\n              <ButtonToolbar className=\"justify-content-center mt-n2 mb-3\">\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.25)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>25%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.5)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>50%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(0.75)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>75%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageStakeInputs(1)} disabled={!allowance.toNumber() || tokenBalance?.isEqualTo(new BN(0))}>100%</Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n              <div className=\"text-center\">\n                {!allowance.toNumber() ?\n                  <Button variant=\"outline-primary\"\n                          disabled={requestedApproval || !account}\n                          onClick={() => handleApprove()}>\n                    {requestedApproval ? \"Approving\" : \"Approve \" + pool.tokenName}\n                  </Button> :\n                  <Button variant=\"outline-primary\"\n                          disabled={shouldDisableStakeButton()}\n                          onClick={() => handleStake()}>\n                    {requestedStake ? \"Staking\" : \"Stake \" + pool.tokenName}\n                  </Button>\n                }\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col xs lg=\"3\">\n          <Card bg={\"transparent\"} text={\"white\"} className=\"rounded-lg border-dark\">\n            <Card.Body>\n              <Card.Title className=\"small\">Staked token</Card.Title>\n              <div className=\"text-right\">\n                <span className=\"small\">\n                  {pool?.userLPStaked != undefined ?\n                    getFullDisplayBalance(pool?.userLPStaked, 4) : \n                    <Spinner as=\"span\" animation=\"border\" role=\"status\" aria-hidden=\"true\" size=\"sm\" />\n                  }\n                </span>\n                <span> </span>\n                <span className=\"small\">{pool.tokenName}</span>\n              </div>\n              <Form>\n                <Form.Group>\n                  <Form.Control size=\"sm\" type=\"text\" placeholder=\"Amount\" value={unstakeAmount} onChange={(e) => {setUnstakeAmount(e.target.value)}} disabled={!pool?.userLPStaked?.toFixed()}/>\n                </Form.Group>\n              </Form>\n              <ButtonToolbar className=\"justify-content-center mt-n2 mb-3\">\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.25)} disabled={!pool?.userLPStaked?.toFixed()}>25%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.5)} disabled={!pool?.userLPStaked?.toFixed()}>50%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup className=\"mr-2\">\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(0.75)} disabled={!pool?.userLPStaked?.toFixed()}>75%</Button>{' '}\n                </ButtonGroup>\n                <ButtonGroup>\n                  <Button variant=\"outline-primary\" size=\"sm\" className=\"border-0\" onClick={() => handlePercentageUnstakeInputs(1)} disabled={!pool?.userLPStaked?.toFixed()}>100%</Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n              <div className=\"text-center\">\n                <Button variant=\"outline-primary\"\n                        disabled={shouldDisableUnstakeButton()}\n                        onClick={() => handleUnstake()}>\n                  {requestedUnstake ? \"Unstaking\" : \"Unstake \" + pool.tokenName}\n                </Button>\n              </div>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useAlphaVaultsStats } from '../hooks/alphapools/useAlphaVaultsStats'\nimport AlphaPoolsFarmPanel from '../components/AlphaPoolsFarmPanel'\n\ninterface ParamTypes {\n  path: string\n}\n\nexport default function AlphaVaultsPool() {\n  const { path } = useParams<ParamTypes>()\n\n  const pools = useAlphaVaultsStats()\n  const pool = pools.find((e, i) => {return (e.path === path)})\n\n  if (path && pools.length > 0 && pool) {\n    return (\n      <AlphaPoolsFarmPanel pool={pool} />\n    )\n  } else {\n    return (<></>)\n  }\n}","import React, { Suspense } from 'react'\nimport {\n  HashRouter,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { PriceFeedProvider } from '../context/PriceFeedContext'\nimport Header from '../components/header'\nimport Footer from '../components/footer'\nimport Home from './home'\nimport Stake from './stake'\nimport AlphaVaults from './AlphaVaults'\nimport Pool from './pool'\nimport About from './about'\nimport AlphaVaultsPool from './AlphaVaultsPool'\n\nexport default function App() {\n  return (\n    <Suspense fallback={null}>\n      <PriceFeedProvider>\n        <Header/>\n        <HashRouter>\n          <Switch>\n            <Route exact strict path=\"/\" component={Home} />\n            <Route exact strict path=\"/home\" component={Home} />\n            <Route exact strict path=\"/stake\" component={Stake} />\n            <Route exact strict path=\"/stake/:id\" component={Pool} />\n            <Route exact strict path=\"/AlphaVaults\" component={AlphaVaults} />\n            <Route exact strict path=\"/AlphaVaults/:path\" component={AlphaVaultsPool} />\n            <Route exact strict path=\"/about\" component={About} />\n          </Switch>\n        </HashRouter>\n        <Footer/>\n      </PriceFeedProvider>\n    </Suspense>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {UseWalletProvider} from 'use-wallet'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport App from './pages/app'\n\nReactDOM.render(\n  <React.StrictMode>\n    <UseWalletProvider chainId={1}>\n      <App />\n    </UseWalletProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}